#!/bin/sh
#
#  DLAInstall
###########################################################################
#
#  Purpose:  This script will install a data load product that follows the
#            DLA standards.
#
#        Usage "DLAInstall  [-d -n]"
#
#          where
#              -d is an option that tells the script that this is a
#                 development installation, so less restrictive permissions
#                 should be used than if it was in production.
#              -n is an option that tells the script that it does not need
#                 to verify the set of directories that are required by
#                 most loads (FILEDIR, INPUTDIR, OUTPUTDIR, etc).
#
#  Env Vars:  None
#
#  Inputs:  None
#   
#  Outputs:  None
#
#  Exit Codes:
#
#      0 = Successful completion
#      1 = An error occurred
#
#  Assumes: 
#      - The calling script has set up the environment.The INSTALLDIR 
#        environment variable is set to define where the load is being installed
#      - DLA standards are being followed for environment variable names
#
#  Implementation:
#
#  Notes:  None
#
###########################################################################

#
#  Function called when the install completes successfully.
#
installCompleted ()
{
    echo "Installation Completed: `date`"
    exit 0
}

#
#  Function called when the install fails.
#
installFailed ()
{
    echo "Installation Failed: `date`"
    exit 1
}

#
#  Check for the options to the script.
#
DEV=no
CHECK_DIR=yes

set -- `getopt dn $*`
if [ $? != 0 ]
then
    echo "DLAInstall  [-d -n]"
    installFailed
fi

for i in $*
do
    case $i in
        -d) DEV=yes; shift;;
        -n) CHECK_DIR=no; shift;;
        --) shift; break;;
    esac
done

#
#  Verify that the installation directory for the load has been defined.
#
if [ "${INSTALLDIR}" = "" ]
then
    echo "Environment variable INSTALLDIR has not been defined."
    installFailed
fi

#
#  Go to the load installation directory to proceed with the install.
#
cd ${INSTALLDIR}

#
#  Verify the directories if the script was not given the option to skip
#  the verification steps.
#
if [ ${CHECK_DIR} = "yes" ]
then
    #
    #  Verify that standard environment variables have been set to define the
    #  directory structure where the load maintains its files.
    #
    if [ "${FILEDIR}" = "" ]
    then
        echo "Environment variable FILEDIR has not been defined."
        installFailed
    fi

    if [ "${ARCHIVEDIR}" = "" ]
    then
        echo "Environment variable ARCHIVEDIR has not been defined."
        installFailed
    fi

    if [ "${LOGDIR}" = "" ]
    then
        echo "Environment variable LOGDIR has not been defined."
        installFailed
    fi

    if [ "${RPTDIR}" = "" ]
    then
        echo "Environment variable RPTDIR has not been defined."
        installFailed
    fi

    if [ "${OUTPUTDIR}" = "" ]
    then
        echo "Environment variable OUTPUTDIR has not been defined."
        installFailed
    fi

    #
    #  Create any standard directories that don't already exist and set the
    #  permissions.
    #
    for i in ${FILEDIR} ${ARCHIVEDIR} ${LOGDIR} ${RPTDIR} ${OUTPUTDIR}
    do
        if [ ! -d ${i} ]
        then
            mkdir -p ${i} >/dev/null 2>&1
            if [ $? -eq 0 ]
            then
                  echo "Directory created: ${i}"
            else
                  echo "Cannot create directory: ${i}"
                  installFailed
            fi
        else
            echo "Directory already exists: ${i}"
        fi

        if [ ${DEV} = "yes" ]
        then
            chmod -f 775 ${i}
        else
            chmod -f 755 ${i}
        fi
    done
fi

#
#  Set permissions in the installation directory.
#
echo "Set permissions in the installation directory."
if [ -f HISTORY ]
then
    if [ ${DEV} = "yes" ]
    then
        chmod -f 664 HISTORY
    else
        chmod -f 644 HISTORY
    fi
fi
if [ -d bin ]
then
    if [ ${DEV} = "yes" ]
    then
        chmod -f 775 bin
        find bin -name "*.sh" -exec chmod -f 775 {} \;
    else
        chmod -f 755 bin
        find bin -name "*.sh" -exec chmod -f 750 {} \;
    fi
fi
if [ -d system_docs ]
then
    if [ ${DEV} = "yes" ]
    then
        chmod -f 775 system_docs
        find system_docs -type f -exec chmod -f 664 {} \;
    else
        chmod -f 755 system_docs
        find system_docs -type f -exec chmod -f 644 {} \;
    fi
fi

#
#  If there is a build.xml file in the installation directory, perform the
#  build and set permissions on files and directories.
#
if [ -f build.xml ]
then
    #
    #  Verify that the ant utility has been defined.
    #
    if [ "${ANT}" = "" ]
    then
        echo "Environment variable ANT has not been defined."
        installFailed
    fi

    #
    #  Perform the build using the ant utility.
    #
    if [ -x ${ANT} ]
    then
        echo "Perform the build using the ant utility."
        ${ANT} all
    else
        echo "Cannot execute ant utility: ${ANT}"
        installFailed
    fi

    #
    #  Set permissions on Java files and directories.
    #
    echo "Set permissions on Java files and directories."
    if [ ${DEV} = "yes" ]
    then
        chmod -f 664 build.xml
        chmod -f 775 *.jar
        find classes -type d -exec chmod -f 775 {} \;
        find classes -type f -exec chmod -f 664 {} \;
        find javadocs -type d -exec chmod -f 775 {} \;
        find javadocs -type f -exec chmod -f 664 {} \;
        find java -type d -exec chmod -f 775 {} \;
        find java -name "*.java" -exec chmod -f 664 {} \;
    else
        chmod -f 644 build.xml
        chmod -f 750 *.jar
        find classes -type d -exec chmod -f 755 {} \;
        find classes -type f -exec chmod -f 640 {} \;
        find javadocs -type d -exec chmod -f 755 {} \;
        find javadocs -type f -exec chmod -f 644 {} \;
        find java -type d -exec chmod -f 755 {} \;
        find java -name "*.java" -exec chmod -f 640 {} \;
    fi
fi

installCompleted
